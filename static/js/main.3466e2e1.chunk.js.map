{"version":3,"sources":["static/assets/solo_dev.jpeg","components/Header/Header.js","components/Home/Home.js","components/About/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","displayMenu","className","onClick","event","toggleMenu","exact","activeClassName","to","Home","useState","avatar","bio","email","name","location","setState","useEffect","axios","get","then","res","data","avatar_url","Button","href","src","solo_dev","alt","About","App","state","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,uC,yRCqE5BC,MAhEf,SAAgBC,GACd,IAAMC,EAAcD,EAAMC,YAI1B,OACE,6BACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAUC,QANI,SAACC,GACnBJ,EAAMK,YAAYJ,IAKkBC,UAAU,oBAC1C,yBAAKA,UAAU,eACb,4BACE,4BACE,kBAAC,IAAD,CACEI,OAAO,EACPC,gBAAgB,oBAChBC,GAAG,cACHN,UAAU,aAJZ,SASF,4BACE,kBAAC,IAAD,CACEK,gBAAgB,oBAChBC,GAAG,mBACHN,UAAU,aAHZ,aAQF,4BACE,kBAAC,IAAD,CACEK,gBAAgB,oBAChBC,GAAG,sBACHN,UAAU,aAHZ,aAQF,4BACE,kBAAC,IAAD,CACEK,gBAAgB,oBAChBC,GAAG,oBACHN,UAAU,aAHZ,WAQF,4BACE,kBAAC,IAAD,CACEK,gBAAgB,oBAChBC,GAAG,qBACHN,UAAU,aAHZ,iB,kDCDCO,MA/Cf,WAAiB,IAAD,EACYC,mBAAS,CACjCC,OAAQ,GACRC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,SAAU,KANE,mBACAC,GADA,WAmBd,OAVAC,qBAAU,WACRC,IAAMC,IAAI,gDAAgDC,MAAK,SAACC,GAC9DL,EAAS,CACPL,OAAQU,EAAIC,KAAKC,WACjBT,KAAMO,EAAIC,KAAKR,KACfF,IAAKS,EAAIC,KAAKV,WAGjB,IAGD,yBAAKV,UAAU,mBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,gBAAf,iBACA,yBAAKA,UAAU,SAAf,2BAEE,6BAFF,6BAIE,6BAJF,mDAOA,6BACE,kBAACsB,EAAA,EAAD,CAAQtB,UAAU,kBAAkBuB,KAAK,sBAAzC,gBAKJ,yBAAKvB,UAAU,SACb,yBACEwB,IAAKC,IACLC,IAAI,uBACJ1B,UAAU,uB,MCvCL2B,MAJf,WACE,OAAO,yBAAK3B,UAAU,oBAAf,2BC2BM4B,MAxBf,WAAgB,IAAD,EACapB,mBAAS,CAAET,aAAa,IADrC,mBACN8B,EADM,KACCf,EADD,KAKb,OACE,yBAAKd,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CACED,YAAa8B,EAAM9B,YACnBI,WARR,WACEW,EAAS,CAAEf,aAAc8B,EAAM9B,iBAS3B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,OAAK,EAAC0B,KAAK,aAAaC,UAAWxB,IAC1C,kBAAC,IAAD,CAAOuB,KAAK,uBACZ,kBAAC,IAAD,CAAOA,KAAK,mBAAmBC,UAAWJ,IAC1C,kBAAC,IAAD,CAAOG,KAAK,sBACZ,kBAAC,IAAD,CAAOA,KAAK,4BCZFE,QACW,cAA7BC,OAAOpB,SAASqB,UAEe,UAA7BD,OAAOpB,SAASqB,UAEhBD,OAAOpB,SAASqB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3466e2e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/solo_dev.934765e2.jpeg\";","import React from \"react\";\nimport \"./Header.scss\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction Header(props) {\n  const displayMenu = props.displayMenu;\n  const handleClick = (event) => {\n    props.toggleMenu(!displayMenu);\n  };\n  return (\n    <div>\n      <div className=\"header\">\n        <MenuIcon onClick={handleClick} className=\"hamburger__menu\"></MenuIcon>\n        <nav className=\"router__nav\">\n          <ul>\n            <li>\n              <NavLink\n                exact={true}\n                activeClassName=\"nav__link__active\"\n                to=\"/portfolio/\"\n                className=\"nav__link\"\n              >\n                Home\n              </NavLink>\n            </li>\n            <li>\n              <NavLink\n                activeClassName=\"nav__link__active\"\n                to=\"/portfolio/about\"\n                className=\"nav__link\"\n              >\n                About Me\n              </NavLink>\n            </li>\n            <li>\n              <NavLink\n                activeClassName=\"nav__link__active\"\n                to=\"/portfolio/projects\"\n                className=\"nav__link\"\n              >\n                Projects\n              </NavLink>\n            </li>\n            <li>\n              <NavLink\n                activeClassName=\"nav__link__active\"\n                to=\"/portfolio/skills\"\n                className=\"nav__link\"\n              >\n                Skills\n              </NavLink>\n            </li>\n            <li>\n              <NavLink\n                activeClassName=\"nav__link__active\"\n                to=\"/portfolio/contact\"\n                className=\"nav__link\"\n              >\n                Contact\n              </NavLink>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Home.scss\";\nimport axios from \"axios\";\nimport solo_dev from \"./../../static/assets/solo_dev.jpeg\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction Home() {\n  const [state, setState] = useState({\n    avatar: \"\",\n    bio: \"\",\n    email: \"\",\n    name: \"\",\n    location: \"\",\n  });\n\n  useEffect(() => {\n    axios.get(\"https://api.github.com/users/ayushpandey8439\").then((res) => {\n      setState({\n        avatar: res.data.avatar_url,\n        name: res.data.name,\n        bio: res.data.bio,\n      });\n    });\n  }, []);\n\n  return (\n    <div className=\"body__container\">\n      <div className=\"text\">\n        <div className=\"hello__world\">&lt;HELLO WORLD&gt;</div>\n        <div className=\"pitch\">\n          My Name is Ayush Pandey.\n          <br />\n          I'm a Full Stack Developer\n          <br />\n          born in India and I am in Germany at the moment\n        </div>\n        <div>\n          <Button className=\"contact__button\" href=\"/portfolio/contact\">\n            Contact Me\n          </Button>\n        </div>\n      </div>\n      <div className=\"image\">\n        <img\n          src={solo_dev}\n          alt=\"Developer on a chair\"\n          className=\"developer_image\"\n        ></img>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./About.scss\";\n\nfunction About() {\n  return <div className=\"about__Container\">This is the About page</div>;\n}\n\nexport default About;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport Home from \"./components/Home/Home\";\nimport About from \"./components/About/About\";\n\nfunction App() {\n  const [state, setState] = useState({ displayMenu: false });\n  function handleMenuToggle() {\n    setState({ displayMenu: !state.displayMenu });\n  }\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header\n          displayMenu={state.displayMenu}\n          toggleMenu={handleMenuToggle}\n        ></Header>\n        <Switch>\n          <Route exact path=\"/portfolio\" component={Home}></Route>\n          <Route path=\"/portfolio/contact\"></Route>\n          <Route path=\"/portfolio/about\" component={About}></Route>\n          <Route path=\"/portfolio/skills\"></Route>\n          <Route path=\"/portfolio/projects\"></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
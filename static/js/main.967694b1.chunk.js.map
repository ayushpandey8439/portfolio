{"version":3,"sources":["static/assets/background.mp4","components/Header/Header.js","components/Body/Body.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","Body","useEffect","console","log","Home","autoPlay","muted","loop","src","background","type","data","App","useState","avatar","bio","email","name","location","state","setState","axios","get","then","res","avatar_url","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,wC,8QCmB5BC,MAhBf,SAAgBC,GACd,OACE,6BACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,gBAAf,gBACA,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,cAAf,QACA,yBAAKA,UAAU,cAAf,YACA,yBAAKA,UAAU,cAAf,YACA,yBAAKA,UAAU,cAAf,e,MCCKC,MAXf,SAAcF,GAIZ,OAHAG,qBAAU,WACRC,QAAQC,IAAIL,KACX,IAED,yBAAKC,UAAU,oBCcJK,MAff,SAAcN,GACZ,OACE,6BACE,6BACE,2BAAOO,UAAQ,EAACC,OAAK,EAACC,MAAI,GACxB,4BAAQC,IAAKC,IAAYC,KAAK,eAEhC,yBAAKX,UAAU,mBAEjB,kBAAC,EAAD,CAAQY,KAAMb,EAAMa,OACpB,kBAAC,EAAD,CAAMA,KAAMb,EAAMa,S,iBCcTC,MA1Bf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,OAAQ,GACRC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,SAAU,KANC,mBACNC,EADM,KACCC,EADD,KAmBb,OAXAnB,qBAAU,WACRoB,IAAMC,IAAI,gDAAgDC,MAAK,SAACC,GAC9DtB,QAAQC,IAAIqB,GACZJ,EAAS,CACPN,OAAQU,EAAIb,KAAKc,WACjBR,KAAMO,EAAIb,KAAKM,KACfF,IAAKS,EAAIb,KAAKI,WAGjB,IAGD,yBAAKhB,UAAU,OACb,kBAAC,EAAD,CAAMY,KAAMQ,MCbEO,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.967694b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.ed4a2ac7.mp4\";","import React from \"react\";\nimport \"./Header.scss\";\n\nfunction Header(props) {\n  return (\n    <div>\n      <div className=\"header\">\n        <div className=\"header_brand\">AYUSH PANDEY</div>\n        <div className=\"header_nav_container\">\n          <div className=\"header_nav\">Home</div>\n          <div className=\"header_nav\">Projects</div>\n          <div className=\"header_nav\">Schedule</div>\n          <div className=\"header_nav\">Socials</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useEffect } from \"react\";\nimport \"./Body.scss\";\nfunction Body(props) {\n  useEffect(() => {\n    console.log(props);\n  }, []);\n  return (\n    <div className=\"body_container\">\n      \n    </div>\n  );\n}\n\nexport default Body;\n","import React from \"react\";\nimport \"./Home.scss\";\nimport background from \"./../../static/assets/background.mp4\";\nimport Header from \"./../Header/Header\";\nimport Body from \"./../Body/Body\";\n\nfunction Home(props) {\n  return (\n    <div>\n      <div>\n        <video autoPlay muted loop>\n          <source src={background} type=\"video/mp4\"></source>\n        </video>\n        <div className=\"video_overlay\"></div>\n      </div>\n      <Header data={props.data}></Header>\n      <Body data={props.data}></Body>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport Home from \"./components/Home/Home\";\nimport axios from \"axios\";\nfunction App() {\n  const [state, setState] = useState({\n    avatar: \"\",\n    bio: \"\",\n    email: \"\",\n    name: \"\",\n    location: \"\",\n  });\n  useEffect(() => {\n    axios.get(\"https://api.github.com/users/ayushpandey8439\").then((res) => {\n      console.log(res);\n      setState({\n        avatar: res.data.avatar_url,\n        name: res.data.name,\n        bio: res.data.bio,\n      });\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Home data={state}></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["static/assets/solo_dev.jpeg","components/Header/Header.js","components/Body/Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","useState","displayMenu","state","setState","showMenu","className","onClick","Body","avatar","bio","email","name","location","useEffect","axios","get","then","res","data","avatar_url","Button","href","target","src","solo_dev","alt","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,uC,oQCuB5BC,MAnBf,SAAgBC,GAAQ,IAAD,EACKC,mBAAS,CAAEC,aAAa,IAD7B,mBACdC,EADc,KACPC,EADO,KAErB,SAASC,IACPD,EAAS,CAAEF,aAAcC,EAAMD,cAEjC,OACE,6BACE,yBAAKI,UAAU,WACXH,EAAMD,aACN,kBAAC,IAAD,CAAUK,QAASF,EAAUC,UAAU,oBAExCH,EAAMD,aACL,kBAAC,IAAD,CAAWK,QAASF,EAAUC,UAAU,uB,kDCwCnCE,MAlDf,WAAiB,IAAD,EACYP,mBAAS,CACjCQ,OAAQ,GACRC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,SAAU,KANE,mBACAT,GADA,WAkBd,OAVAU,qBAAU,WACRC,IAAMC,IAAI,gDAAgDC,MAAK,SAACC,GAC9Dd,EAAS,CACPK,OAAQS,EAAIC,KAAKC,WACjBR,KAAMM,EAAIC,KAAKP,KACfF,IAAKQ,EAAIC,KAAKT,WAGjB,IAGD,yBAAKJ,UAAU,mBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,gBAAf,iBACA,yBAAKA,UAAU,SAAf,2BAEE,6BAFF,6BAIE,6BAJF,0CAOA,6BACE,kBAACe,EAAA,EAAD,CACEf,UAAU,kBACVgB,KAAK,mCACLC,OAAO,UAHT,gBASJ,yBAAKjB,UAAU,SACb,yBACEkB,IAAKC,IACLC,IAAI,uBACJpB,UAAU,uBCnCLqB,MATf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcsB,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5a607364.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/solo_dev.934765e2.jpeg\";","import React, { useState } from \"react\";\nimport \"./Header.scss\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nfunction Header(props) {\n  const [state, setState] = useState({ displayMenu: false });\n  function showMenu() {\n    setState({ displayMenu: !state.displayMenu });\n  }\n  return (\n    <div>\n      <div className=\"header\">\n        {!state.displayMenu && (\n          <MenuIcon onClick={showMenu} className=\"hamburger__menu\"></MenuIcon>\n        )}\n        {state.displayMenu && (\n          <CloseIcon onClick={showMenu} className=\"hamburger__menu\"></CloseIcon>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Body.scss\";\nimport axios from \"axios\";\nimport solo_dev from \"./../../static/assets/solo_dev.jpeg\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction Body() {\n  const [state, setState] = useState({\n    avatar: \"\",\n    bio: \"\",\n    email: \"\",\n    name: \"\",\n    location: \"\",\n  });\n  useEffect(() => {\n    axios.get(\"https://api.github.com/users/ayushpandey8439\").then((res) => {\n      setState({\n        avatar: res.data.avatar_url,\n        name: res.data.name,\n        bio: res.data.bio,\n      });\n    });\n  }, []);\n\n  return (\n    <div className=\"body__container\">\n      <div className=\"text\">\n        <div className=\"hello__world\">&lt;HELLO WORLD&gt;</div>\n        <div className=\"pitch\">\n          My Name is Ayush Pandey.\n          <br />\n          I'm a Full Stack Developer\n          <br />\n          born in India and currently in Germany\n        </div>\n        <div>\n          <Button\n            className=\"contact__button\"\n            href=\"mailto:ayushpandey8439@gmail.com\"\n            target=\"_blank\"\n          >\n            Contact Me\n          </Button>\n        </div>\n      </div>\n      <div className=\"image\">\n        <img\n          src={solo_dev}\n          alt=\"Developer on a chair\"\n          className=\"developer_image\"\n        ></img>\n      </div>\n    </div>\n  );\n}\n\nexport default Body;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.scss\";\n\nimport Header from \"./components/Header/Header\";\nimport Body from \"./components/Body/Body\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Body></Body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}